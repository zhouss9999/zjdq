package wy.qingdao_atmosphere.onemap.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.geotools.data.DataUtilities;
import org.geotools.data.collection.ListFeatureCollection;
import org.geotools.data.simple.SimpleFeatureCollection;
import org.geotools.feature.SchemaException;
import org.geotools.feature.simple.SimpleFeatureBuilder;
import org.geotools.geojson.feature.FeatureJSON;
import org.opengis.feature.simple.SimpleFeature;
import org.opengis.feature.simple.SimpleFeatureType;

import com.vividsolutions.jts.geom.GeometryFactory;
import com.vividsolutions.jts.geom.Point;
import com.vividsolutions.jts.io.WKTReader;

import java.io.StringWriter;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.io.IOException;
import java.lang.reflect.Field;

import javax.servlet.http.HttpServletRequest;

import wy.qingdao_atmosphere.countrysitedata.domain.ParamAssis;
import wy.qingdao_atmosphere.onemap.dao.OneMapDao;
import wy.qingdao_atmosphere.onemap.domain.KqzlColl;
import wy.qingdao_atmosphere.onemap.domain.OmMenu;
import wy.qingdao_atmosphere.onemap.domain.OmRank;
import wy.qingdao_atmosphere.onemap.domain.PicInfo;
import wy.util.DatapointsApiThreadUtil;
import wy.util.datapersistence.SpaceInfo;
import wy.util.datapersistence.Dao.BaseaddDao;
import wy.util.datapersistence.service.BaseService;


@Service("oneMapService")
public class OneMapServiceImpl implements OneMapService {

	@Autowired
	private BaseaddDao baseaddDao;
	
	@Autowired 
	private BaseService baseService;
	
	@Autowired
	private OneMapDao oneMapDao;


	public List<OmMenu> getOmMenuList() {
		//原始数据
		List<OmMenu> rootlist = oneMapDao.getOmMenuList();
		//创建list，存放最后的结果
		List<OmMenu> menuList = new ArrayList<OmMenu>();
		
		if (rootlist.size() > 0) {
			//先找到所有的一级目录
			for (OmMenu menu : rootlist) {
				//一级目录的父级目录id为'0'
				if ("0".equals(menu.getParentid())) {
					menuList.add(menu);
				}
			}
			
			//为一级目录设置子目录,getChild是递归调用的
			for (OmMenu menu : menuList) {
				menu.setChildList(getChild(String.valueOf(menu.getId()),rootlist));
			}
		}
		
		return menuList;
	}

	
	/**
	 * 递归查找子菜单
	 * @param id 当前目录id
	 * @param rootMenu 要查找的列表
	 * @return childList
	 */
	private List<OmMenu> getChild(String id, List<OmMenu> rootMenu) {
	    //子目录
	    List<OmMenu> childList = new ArrayList<OmMenu>();
	    for (OmMenu menu : rootMenu) {
	        // 遍历所有节点，将父目录id与传过来的id比较
	        if (!("0".equals(menu.getParentid()))) {
	            if (menu.getParentid().equals(id)) {
	                childList.add(menu);
	            }
	        }
	    }
	    // 把子目录的子目录再循环一遍
	    for (OmMenu menu : childList) {
            // 递归
            menu.setChildList(getChild(String.valueOf(menu.getId()), rootMenu));
	    } 
	    // 递归退出条件
	    if (childList.size() == 0) {
	        return new ArrayList<OmMenu>();
	    }
	    return childList;
	}
	
	
	public StringWriter getOmSiteGeom(HttpServletRequest request, String mark) {
		
		//给出默认值:默认给国站的
		int objtypeid = 5; //objtypeid
		String space_tablename = "space_countrysite"; //空间表名
		String cityfieldid = "5010006"; //城市fieldid
		String mtypefieldid = "4010004";//监测类型fieldid
		if ("wz".equals(mark)) {
			objtypeid = 1;
			space_tablename = "space_site";
			cityfieldid = "1010006";
			mtypefieldid = "1010004";
		} else if ("fs".equals(mark)) {
			objtypeid = 12;
			space_tablename = "space_wbstation";
			cityfieldid = "12010004";
		}
		
		//传参Map
		Map<String, Object> paramMap = new LinkedHashMap<String, Object>();
		
		paramMap.put("objtypeid", objtypeid);
		paramMap.put("cityfieldid", cityfieldid);
		paramMap.put("mtypefieldid", mtypefieldid);
		
		/**========================================请求参数=========================================================*/
		//行政区域(多个用逗号隔开)
		String citys = request.getParameter("city") == null ? "" : request.getParameter("city");
		String city = "";
		if (!"".equals(citys)) {
			for (int i = 0; i < citys.split(",").length; i++) {
				if (i != citys.split(",").length - 1) {
					city += "'"+ citys.split(",")[i] + "',";
				} else {
					city += "'"+ citys.split(",")[i] + "'";
				}
			}		
		}
		//微站监测类型(多个用逗号隔开)
		String monitortypes = request.getParameter("monitortype") == null ? "" : request.getParameter("monitortype");
		String monitortype = "";
		if (!"".equals(monitortypes)) {
			for (int i = 0; i < monitortypes.split(",").length; i++) {
				if (i != monitortypes.split(",").length - 1) {
					monitortype += "'"+ monitortypes.split(",")[i] + "',";
				} else {
					monitortype += "'"+ monitortypes.split(",")[i] + "'";
				}
			}		
		}
		
		//站点objid(多个用逗号隔开)
		String objid = request.getParameter("objid") == null ? "" : request.getParameter("objid");
		/**======================================================================================================*/
		
		paramMap.put("city", city);
		paramMap.put("monitortype", monitortype);
		paramMap.put("objid", objid);
		
		//站点信息列表
		List<Map<String,Object>> siteList = baseService.selectForCpAttachInfoStoreTwo(paramMap, "getOmObjInfoList");
		
		//站点空间位置信息列表(list转map，优化程序)
		List<SpaceInfo> siteGeomList = baseService.getGeomList(space_tablename,objid);
		Map<Integer, String> siteGeomMap = new LinkedHashMap<Integer, String>();
		if (siteGeomList.size() > 0) {
			for (SpaceInfo spaceInfo : siteGeomList) {
				siteGeomMap.put(spaceInfo.getObjid(), spaceInfo.getShape());
			}
		}
		
		StringWriter writer = new StringWriter();
		
		try {
			SimpleFeatureType TYPE = null;
			if ("fs".equals(mark)) {
				TYPE = DataUtilities.createType("Link", "geometry:Point,objid:Integer,sitenumber:String,"
						+ "sitename:String,province:String,city:String,county:String,address:String," 
						+ "lon:String,lat:String,altitude:String"
				);
			} else {
				paramMap.clear();
				paramMap.put("objtypeid", objtypeid);
				paramMap.put("objid", objid);
				paramMap.put("recently", "1 second");
				paramMap.put("dateformat", "yyyy-mm-dd HH24:MI:SS");
				
				List<KqzlColl> kqzlList = new ArrayList<KqzlColl>();
				if ("wz".equals(mark)) {
					paramMap.put("sitenameid", "1010003");
					paramMap.put("sitenumberid", "1010001");
					kqzlList = oneMapDao.getOmWzSiteForKqzl(paramMap);
				} else {
					paramMap.put("sitenameid", "5010003");
					paramMap.put("sitenumberid", "5010001");
					kqzlList = oneMapDao.getOmGzSiteForKqzl(paramMap);
				}
				Map<Integer, KqzlColl> colMap = new LinkedHashMap<Integer, KqzlColl>();
				if (kqzlList.size() > 0) {
					for (KqzlColl kc : kqzlList) {
						colMap.put(kc.getObjid(), kc);
					}
				}
				
				for (int i = 0, size = siteList.size(); i < size; i++) {
					Map<String, Object> siteMap = siteList.get(i);
					if (colMap.containsKey(Integer.parseInt(siteMap.get("objid").toString()))) {
						KqzlColl kc = colMap.get(Integer.parseInt(siteMap.get("objid").toString()));
						siteMap.put("issite", kc.getIssite());
						siteMap.put("collecttime", kc.getCollecttime());
						siteMap.put("aqi", kc.getAqi());
						siteMap.put("pm25", kc.getPm25());
						siteMap.put("pm10", kc.getPm10());
						siteMap.put("co", kc.getCo());
						siteMap.put("no2", kc.getNo2());
						siteMap.put("so2", kc.getSo2());
						siteMap.put("o3", kc.getO3());
						siteMap.put("o38", kc.getO38());
						siteMap.put("voc", kc.getVoc());
						siteMap.put("pollutant", kc.getPollutant());
						siteMap.put("quality", kc.getQuality());
					}
				}
				
				TYPE = DataUtilities.createType("Link", "geometry:Point,objid:Integer,sitenumber:String,"
						+ "sitetype:String,sitename:String,monitortype:String," 
				        + "province:String,city:String,county:String,address:String,"
						+ "lon:String,lat:String,device:String,issite:String,collecttime:String,aqi:String,"
						+ "pm25:String,pm10:String,co:String,no2:String,so2:String,o3:String,o38:String,voc:String," 
						+ "pollutant:String,quality:String"
				);
			}
			
			writer = getSiteGeoJson(TYPE, siteList, siteGeomMap);
			
		} catch (SchemaException e) {
			e.printStackTrace();
		}
		
		
		return writer;
	}
	

	public List<KqzlColl> getOmGzSiteForKqzl(HttpServletRequest request, Map<String, Object> paramMap) {
		
		String objid = (request.getParameter("objid") == null || "".equals(request.getParameter("objid"))) ? "" : request.getParameter("objid");
		paramMap.put("objid", objid);
		
		if (paramMap.containsKey("history")) {
			//时间格式：yyyy-MM-dd
			String begintime = request.getParameter("begintime") == null ? "" : request.getParameter("begintime");
			String endtime = request.getParameter("endtime") == null ? "" : request.getParameter("endtime");
			
			if ("".equals(begintime) && "".equals(endtime)) {
				paramMap.put("recently", "24 hour");
				paramMap.put("dateformat", "yyyy-mm-dd HH24:MI:SS");
				paramMap.put("sitenameid", "5010003");
				paramMap.put("sitenumberid", "5010001");
				paramMap.put("objtypeid", 5);
			} else {
				if (!"".equals(begintime) && !"".equals(endtime)) {
					if ((begintime).equals(endtime)) {//同一天
						begintime = begintime +" 00:00:00";
						endtime = endtime +" 23:59:59";
						
						paramMap.put("begintime", begintime);
						paramMap.put("endtime", endtime);
						paramMap.put("dateformat", "yyyy-mm-dd HH24:MI:SS");
						paramMap.put("sitenameid", "5010003");
						paramMap.put("sitenumberid", "5010001");
						paramMap.put("objtypeid", 5);
					} else {//不同一天
						begintime = begintime +" 00:00:00";
						endtime = endtime +" 23:59:59";
						
						paramMap.put("begintime", begintime);
						paramMap.put("endtime", endtime);
						paramMap.put("dateformat", "yyyy-mm-dd");
						paramMap.put("sitenameid", "6010001");
						paramMap.put("sitenumberid", "6010002");
						paramMap.put("objtypeid", 6);
					}
				} else {
					if (!"".equals(begintime)) {
						begintime = begintime +" 00:00:00";
					}
					if (!"".equals(endtime)) {
						endtime = endtime +" 23:59:59";
					}
					
					paramMap.put("begintime", begintime);
					paramMap.put("endtime", endtime);
					paramMap.put("dateformat", "yyyy-mm-dd");
					paramMap.put("sitenameid", "6010001");
					paramMap.put("sitenumberid", "6010002");
					paramMap.put("objtypeid", 6);
				}
			}
			
		}
		
		List<KqzlColl> kqzlList = oneMapDao.getOmGzSiteForKqzl(paramMap);
		if (kqzlList.size() == 0) {
			kqzlList = new ArrayList<KqzlColl>();
		} 
		
		return kqzlList;
	}
	
	
	public List<KqzlColl> getOmWzSiteForKqzl(HttpServletRequest request, Map<String, Object> paramMap) {
		
		String objid = (request.getParameter("objid") == null || "".equals(request.getParameter("objid"))) ? "" : request.getParameter("objid");
		paramMap.put("objid", objid);
		
		if (paramMap.containsKey("history")) {
			//时间格式：yyyy-MM-dd
			String begintime = request.getParameter("begintime") == null ? "" : request.getParameter("begintime");
			String endtime = request.getParameter("endtime") == null ? "" : request.getParameter("endtime");
			
			if ("".equals(begintime) && "".equals(endtime)) {
				paramMap.put("recently", "24 hour");
				paramMap.put("dateformat", "yyyy-mm-dd HH24:MI:SS");
				paramMap.put("sitenameid", "1010003");
				paramMap.put("sitenumberid", "1010001");
				paramMap.put("objtypeid", 1);
			} else {
				if (!"".equals(begintime) && !"".equals(endtime)) {
					if ((begintime).equals(endtime)) {//同一天
						begintime = begintime +" 00:00:00";
						endtime = endtime +" 23:59:59";
						
						paramMap.put("begintime", begintime);
						paramMap.put("endtime", endtime);
						paramMap.put("dateformat", "yyyy-mm-dd HH24:MI:SS");
						paramMap.put("sitenameid", "1010003");
						paramMap.put("sitenumberid", "1010001");
						paramMap.put("objtypeid", 1);
					} else {//不同一天
						begintime = begintime +" 00:00:00";
						endtime = endtime +" 23:59:59";
						
						paramMap.put("begintime", begintime);
						paramMap.put("endtime", endtime);
						paramMap.put("dateformat", "yyyy-mm-dd");
						paramMap.put("sitenameid", "2010001");
						paramMap.put("sitenumberid", "2010002");
						paramMap.put("objtypeid", 2);
					}
				} else {
					if (!"".equals(begintime)) {
						begintime = begintime +" 00:00:00";
					}
					if (!"".equals(endtime)) {
						endtime = endtime +" 23:59:59";
					}
					
					paramMap.put("begintime", begintime);
					paramMap.put("endtime", endtime);
					paramMap.put("dateformat", "yyyy-mm-dd");
					paramMap.put("sitenameid", "2010001");
					paramMap.put("sitenumberid", "2010002");
					paramMap.put("objtypeid", 2);
				}
			}
			
		}
		
		List<KqzlColl> kqzlList = oneMapDao.getOmWzSiteForKqzl(paramMap);
		if (kqzlList.size() == 0) {
			kqzlList = new ArrayList<KqzlColl>();
		} 
		
		return kqzlList;
	}

	
	public Map<String, Object> omFsData(HttpServletRequest request,String datastreamIds) {
		
		//必传
		String objid = (request.getParameter("objid") == null || "".equals(request.getParameter("objid"))) ? "0" : request.getParameter("objid");
		
		//String[] colMinMaxTime = colMinMaxTime("5",72,objid);
		String[] colMinMaxTime = new String[2];
		if (request.getAttribute("actual") != null) {
			colMinMaxTime = colMinMaxTimeByHour("5", 1, objid, "", "");
		} else {
			colMinMaxTime = colMinMaxTimeByHour("5",72,objid, "", "");
		}
		
		//按时间查询 格式：yyyy-MM-dd
		String begintime = (request.getParameter("begintime") == null || "".equals(request.getParameter("begintime"))) ? colMinMaxTime[0] : request.getParameter("begintime") +" 00:00:00";
		String endtime = (request.getParameter("endtime") == null || "".equals(request.getParameter("endtime"))) ? colMinMaxTime[1] : request.getParameter("endtime") +" 23:59:59";
		
		Map<String, Object> resultMap = getDataMap("5", objid, datastreamIds, begintime, endtime, null);
		
		return resultMap;
	}
	
	
	public Map<String, Object> omFsDataSecond(HttpServletRequest request,String datastreamIds) {
		
		//必传
		String objid = (request.getParameter("objid") == null || "".equals(request.getParameter("objid"))) ? "0" : request.getParameter("objid");
		
		//String[] colMinMaxTime = colMinMaxTime("5",72,objid);
		String[] colMinMaxTime = new String[2];
		if (request.getAttribute("actual") != null) {
			colMinMaxTime = colMinMaxTimeByHour("5",1,objid, "", "");
		} else {
			colMinMaxTime = colMinMaxTimeByHour("5",72,objid, "", "");
		}
		
		//按时间查询 格式：yyyy-MM-dd HH:mm:ss
		String begintime = (request.getParameter("begintime") == null || "".equals(request.getParameter("begintime"))) ? colMinMaxTime[0] : request.getParameter("begintime");
		String endtime = (request.getParameter("endtime") == null || "".equals(request.getParameter("endtime"))) ? colMinMaxTime[1] : request.getParameter("endtime");
		
		Map<String, Object> resultMap = getDataMap("5", objid, datastreamIds, begintime, endtime, null);
		
		return resultMap;
	}


	public StringWriter getOmAllSiteGeom(HttpServletRequest request, String mark) {
		
		String city = (request.getParameter("city") == null || "".equals(request.getParameter("city"))) ? "青岛市" : request.getParameter("city");
		String objid = (request.getParameter("objid") == null || "".equals(request.getParameter("objid"))) ? "" : request.getParameter("objid");
		//获取所有站点坐标
		String space_table = "space_site union select objid,id,st_AsText(shape) shape from space_countrysite";
		
		if ("wx".equals(mark)) {
			space_table = "space_satellite";
		}
		List<SpaceInfo> siteGeomList = baseService.getGeomList(space_table, objid);
		Map<Integer, String> siteGeomMap = new LinkedHashMap<Integer, String>();
		if (siteGeomList.size() > 0) {
			for (SpaceInfo spaceInfo : siteGeomList) {
				siteGeomMap.put(spaceInfo.getObjid(), spaceInfo.getShape());
			}
		}
		
		Map<String, Object> paramMap = new HashMap<String, Object>();
		StringWriter writer = new StringWriter();
		
		if ("rd".equals(mark)) {//热点分析
			if (!"".equals(city)) {
				paramMap.put("city", "'"+city+"'");
			}
			paramMap.put("objtypeid", "1,5");
			paramMap.put("cityfieldid", "1010006,5010006");
			//站点基本信息列表
			List<Map<String,Object>> siteList = baseService.selectForCpAttachInfoStoreTwo(paramMap, "getOmObjInfoList");
			
			paramMap.clear();
			if (!"".equals(city)) {
				paramMap.put("city", "'"+city+"'");
			}
			paramMap.put("dateformat", "yyyy-mm-dd");
			paramMap.put("sitenameid", "2010001,6010001");
			paramMap.put("sitenumberid", "2010002,6010002");
			paramMap.put("objtypeid", "2,6");
			paramMap.put("recently", "30 day");
			
			//各个站点近30天的监测数据
			List<KqzlColl> sitecolList = oneMapDao.getOmAllSiteForKqzl(paramMap);
			
			//创建优良率map<objid,int[优良天数,所有天数]>
			Map<Integer, int[]> beanMap = new LinkedHashMap<Integer, int[]>();
			Map<Integer, KqzlColl> typeMap = new LinkedHashMap<Integer, KqzlColl>();
			
			for (KqzlColl kc : sitecolList) {
				if (beanMap.containsKey(kc.getObjid())) {
					if ("优".equals(kc.getQuality()) || "良".equals(kc.getQuality())) {
						beanMap.get(kc.getObjid())[0] += 1;
					}
					beanMap.get(kc.getObjid())[1] += 1;
					beanMap.put(kc.getObjid(), beanMap.get(kc.getObjid()));
				} else {
					//初始化优良率数组
					int[] goodsize = {0,0};
					if ("优".equals(kc.getQuality()) || "良".equals(kc.getQuality())) {
						goodsize[0] += 1;
					}
					goodsize[1] += 1;
					beanMap.put(kc.getObjid(), goodsize);
					typeMap.put(kc.getObjid(), kc);
				}
			}
			
			//计算优良率
			DecimalFormat df = new DecimalFormat("#0.0");//保留一位小数(奇进偶舍)
			//df.setRoundingMode(RoundingMode.HALF_UP);//(四舍五入)
			
			for (int i = 0; i < siteList.size(); i++) {
				Map<String, Object> siteMap = siteList.get(i);
				int beanMapkey = Integer.parseInt(siteMap.get("objid").toString());
				if (typeMap.containsKey(beanMapkey)) {
					siteMap.put("issite", typeMap.get(beanMapkey).getIssite());
				}
				if (beanMap.containsKey(beanMapkey)) {
					int[] goodsize = beanMap.get(beanMapkey);
					int size = goodsize[1];
					if (size == 0) {
						size =1;
					}
					siteMap.put("goodrate", df.format(((double)goodsize[0]/size)*100));
				}
			}
			
			try {
				SimpleFeatureType TYPE = DataUtilities.createType("Link", 
						  "geometry:Point,objid:Integer,sitenumber:String,"
						+ "sitetype:String,sitename:String,monitortype:String," 
				        + "province:String,city:String,county:String,address:String,"
						+ "lon:String,lat:String,device:String,issite:String,goodrate:String"
				);
				
				writer = getSiteGeoJson(TYPE, siteList, siteGeomMap);
				
			} catch (SchemaException e) {
				e.printStackTrace();
			}
		} else if ("wx".equals(mark)){//卫星云图
			if (!"".equals(city)) {
				paramMap.put("city", "'"+city+"'");
			}
			paramMap.put("objtypeid", "13");
			paramMap.put("objid", objid);
			paramMap.put("cityfieldid", "13010004");
			//站点基本信息列表
			List<Map<String,Object>> siteList = baseService.selectForCpAttachInfoStoreTwo(paramMap, "getOmObjInfoList");
			
			try {
				SimpleFeatureType TYPE = DataUtilities.createType("Link", 
						  "geometry:Point,objid:Integer,sitenumber:String,"
						+ "sitename:String,province:String,city:String,county:String," 
						+ "address:String,lon:String,lat:String"
				);
				
				writer = getSiteGeoJson(TYPE, siteList, siteGeomMap);
				
			} catch (SchemaException e) {
				e.printStackTrace();
			}
		} else {//精细化
			if (!"".equals(city)) {
				paramMap.put("city", "'"+city+"'");
			}
			paramMap.put("dateformat", "yyyy-mm-dd HH24:MI:SS");
			paramMap.put("sitenameid", "1010003,5010003");
			paramMap.put("sitenumberid", "1010001,5010001");
			paramMap.put("objtypeid", "1,5");
			paramMap.put("recently", "1 second");
			
			//各个站点最新的监测数据
			List<KqzlColl> siteList = oneMapDao.getOmAllSiteForKqzl(paramMap);
			try {
				SimpleFeatureType TYPE = DataUtilities.createType("Link", 
						  "geometry:Point,objid:Integer,sitenumber:String,"
					    + "sitetype:String,sitename:String,monitortype:String," 
				        + "province:String,city:String,county:String,address:String,"
						+ "lon:String,lat:String,device:String,issite:String,collecttime:String,aqi:String,"
						+ "pm25:String,pm10:String,co:String,no2:String,so2:String,o3:String," 
						+ "o38:String,voc:String,pollutant:String,quality:String"
				);
				
				writer = getSitesGeoJson(TYPE, siteList, siteGeomMap);
				
			} catch (SchemaException e) {
				e.printStackTrace();
			}
		}
		
		return writer;
	}


	public Map<String, Object> getOmSiteYll(HttpServletRequest request, int day) {
		String objid = request.getParameter("objid") == null ? "" : request.getParameter("objid");
		String dayObjid = oneMapDao.getDayDataObjid(objid);
		
		String[] times = colMinMaxTimeByDay("1,4", day, dayObjid,"1,29,2,30,3,21,4,22,5,23,6,24,7,97,28,8,9","2,6");
		
		String begintime = times[0];
		String endtime = times[1];
		
		Map<String, Object> paramMap = new LinkedHashMap<String, Object>();
		
		//近day天的监测数据
		paramMap.put("objid", objid);
		paramMap.put("begintime", begintime);
		paramMap.put("endtime", endtime);
		paramMap.put("dateformat", "yyyy-mm-dd");
		paramMap.put("sitenameid", "2010001,6010001");
		paramMap.put("sitenumberid", "2010002,6010002");
		paramMap.put("objtypeid", "2,6");
		List<KqzlColl> daylist = oneMapDao.getOmAllSiteForKqzl(paramMap);
		
		int good = 0;
		int size = daylist.size();
		if (daylist.size() > 0) {
			for (KqzlColl kc : daylist) {
				if ("优".equals(kc.getQuality()) || "良".equals(kc.getQuality())) {
					good += 1;
				}
			}
		} else {
			size = 1;
		}
		
		DecimalFormat df = new DecimalFormat("#0.0");//保留一位小数(奇进偶舍)
		//df.setRoundingMode(RoundingMode.HALF_UP);//四舍五入
		paramMap.clear();
		paramMap.put("goodday", good);//优良天数
		paramMap.put("goodrate", df.format(((double)good/size)*100));//优良率
		paramMap.put("daydata", daylist);//近day天的空气质量监测值
		
		return paramMap;
	}

	
	/**
	 * 站点列表及坐标信息转换为geoJson格式
	 * 
	 * @param TYPE:定义坐标系及字段
	 * @param siteList:站点基本信息列表
	 * @param siteGeomMap:站点坐标列表
	 * 
	 * @return writer
	 */
	private StringWriter getSiteGeoJson(SimpleFeatureType TYPE, List<Map<String,Object>> siteList, Map<Integer, String> siteGeomMap) {
		
		StringWriter writer = new StringWriter();
		try {
			SimpleFeatureBuilder featureBuilder = new SimpleFeatureBuilder(TYPE);
			GeometryFactory geometryFactory = new GeometryFactory();
			WKTReader reader = new WKTReader(geometryFactory);
			FeatureJSON fjson = new FeatureJSON();
			List<SimpleFeature> features = new ArrayList<SimpleFeature>();
			SimpleFeatureCollection collection = new ListFeatureCollection(TYPE, features);
			
			if (siteList.size() > 0) {
				for (int i = 0; i < siteList.size(); i++) {
					Map<String, Object> siteMap = siteList.get(i);
					
					int geoMapKey = Integer.parseInt(siteMap.get("objid").toString());
					if (siteGeomMap.containsKey(geoMapKey)) {
						
						Point point = (Point)reader.read(siteGeomMap.get(geoMapKey));
						featureBuilder.add(point);//坐标
						
						for(Map.Entry<String, Object> entry : siteMap.entrySet()){
							if ("objid".equals(entry.getKey())) {
								featureBuilder.add(geoMapKey);//objid
							} else {
								featureBuilder.add(entry.getValue().toString());
							}
				        }
						
						SimpleFeature feature = featureBuilder.buildFeature(null);
						
						features.add(feature);
						
					}
				} 
			}
			
			fjson.writeFeatureCollection(collection, writer);
			
		} catch (IOException e) {
			e.printStackTrace();
		} catch (com.vividsolutions.jts.io.ParseException e) {
			e.printStackTrace();
		}
		
		return writer;
	}
	
	
	/**
	 * 站点列表及坐标信息转换为geoJson格式
	 * 
	 * @param TYPE:定义坐标系及字段
	 * @param siteList:站点基本信息+监测数据列表
	 * @param siteGeomMap:站点坐标列表
	 * 
	 * @return writer
	 */
	private StringWriter getSitesGeoJson(SimpleFeatureType TYPE, List<KqzlColl> siteList, Map<Integer, String> siteGeomMap) {
		
		StringWriter writer = new StringWriter();
		try {
			SimpleFeatureBuilder featureBuilder = new SimpleFeatureBuilder(TYPE);
			GeometryFactory geometryFactory = new GeometryFactory();
			WKTReader reader = new WKTReader(geometryFactory);
			FeatureJSON fjson = new FeatureJSON();
			List<SimpleFeature> features = new ArrayList<SimpleFeature>();
			SimpleFeatureCollection collection = new ListFeatureCollection(TYPE, features);
			
			if (siteList.size() > 0) {
				for (int i = 0; i < siteList.size(); i++) {
					KqzlColl site = siteList.get(i);
					int geoMapKey = site.getObjid();
					
					if (siteGeomMap.containsKey(geoMapKey)) {
						
						Point point = (Point)reader.read(siteGeomMap.get(geoMapKey));
						featureBuilder.add(point);//坐标
						
						for (Field field : site.getClass().getDeclaredFields()) {
						    field.setAccessible(true);
						    featureBuilder.add(field.get(site));
						}
						
						SimpleFeature feature = featureBuilder.buildFeature(null);
						
						features.add(feature);
						
					}
				} 
			}
			
			fjson.writeFeatureCollection(collection, writer);
			
		} catch (IOException e) {
			e.printStackTrace();
		} catch (com.vividsolutions.jts.io.ParseException e) {
			e.printStackTrace();
		} catch (IllegalArgumentException e) {
			e.printStackTrace();
		} catch (IllegalAccessException e) {
			e.printStackTrace();
		}
		
		return writer;
	}
	
	
	/**
	 * 获取数据库监测数据最大时间(maxtime)和(maxtime-n小时)的时间
	 * @param devicetypeid 设备类型id
	 * @param hour 小时
	 * @param objid 对象id
	 * @param paramid 参数id
	 * @param objtypeid 对象类型id
	 * @return {mintime,maxtime}
	 * 
	 * 空气质量paramid：1,29,2,30,3,21,4,22,5,23,6,24,7,97,28,8,9 -->
	 * 空气质量objtypeid：实时数据(1,5),日数据(2,6) 
	 */
	private String[] colMinMaxTimeByHour(String devicetypeid, int hour, String objid, String paramid, String objtypeid){
		//起始时间
		//获取数据库中辐射监测数据的最新时间
		String maxtime = baseaddDao.getMaxTimeByDtOtid("yyyy-MM-dd HH24:MI:ss", devicetypeid, paramid, objtypeid, objid);
		//获取最大时间往前hour小时的时间
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		Date date = new Date();
		try {
			if (maxtime != null && !"".equals(maxtime)) {
					date = sdf.parse(maxtime);
			} else {
				maxtime = sdf.format(date);
			}
		} catch (ParseException e) {
			e.printStackTrace();
		}
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(date);
		calendar.set(Calendar.HOUR_OF_DAY, calendar.get(Calendar.HOUR_OF_DAY)-hour);//(maxtime-n小时)的时间
		String mintime = sdf.format(calendar.getTime());
		
		String[] times = {mintime,maxtime};
		
		return times;
	}
	
	
	/**
	 * 获取数据库监测数据最大时间(maxtime)和(maxtime-n天)的时间
	 * @param devicetypeid 设备类型id
	 * @param day 天
	 * @param objid 对象id
	 * @param paramid 参数id
	 * @param objtypeid 对象类型id
	 * @return {mintime,maxtime}
	 * 
	 * 空气质量paramid：1,29,2,30,3,21,4,22,5,23,6,24,7,97,28,8,9 -->
	 * 空气质量objtypeid：实时数据(1,5),日数据(2,6)
	 */
	private String[] colMinMaxTimeByDay(String devicetypeid, int day, String objid, String paramid, String objtypeid){
		//起始时间
		//获取数据库中辐射监测数据的最新时间
		String maxtime = baseaddDao.getMaxTimeByDtOtid("yyyy-MM-dd", devicetypeid, paramid, objtypeid, objid);
		//获取最大时间往前hour小时的时间
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Date date = new Date();
		try {
			if (maxtime != null && !"".equals(maxtime)) {
				date = sdf.parse(maxtime);
			} else {
				maxtime = sdf.format(date);
			}
		} catch (ParseException e) {
			e.printStackTrace();
		}
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(date);
		calendar.set(Calendar.DAY_OF_MONTH, calendar.get(Calendar.DAY_OF_MONTH)-day);//(maxtime-n天)的时间
		String mintime = sdf.format(calendar.getTime());
		
		String[] times = {mintime + " 00:00:00",maxtime + " 23:59:59"};
		
		return times;
	}
	
	
	/**
     * 获取指定年月的最后一天
     * @param year
     * @param month
     * @return
     */
    private static String getLastDayOfMonth(String yearmonth) {     
        if(!"".equals(yearmonth) && yearmonth.contains("-")){
        	String[] YMArr = yearmonth.split("-");
	    	Calendar cal = Calendar.getInstance();     
	        //设置年份  
	        cal.set(Calendar.YEAR, Integer.parseInt(YMArr[0]));  
	        //设置月份  
	        cal.set(Calendar.MONTH, Integer.parseInt(YMArr[1])-1); 
	        //获取某月最大天数
	        int lastDay = cal.getActualMaximum(Calendar.DATE);
	        //设置日历中月份的最大天数  
	        cal.set(Calendar.DAY_OF_MONTH, lastDay);  
	        //格式化日期
	        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");  
	        return sdf.format(cal.getTime())+" 23:59:59";
        }else{
        	return "";
        }
    }
    
	
	/**
	 * 数据点查询(单个站点)
	 * @param devicetypeid:设备类型id,String
	 * @param objid:对象id,String
	 * @param datastreamids:查询的数据流，多个数据流之间用逗号分隔（可选）,String
	 * @param startTime:提取数据点的开始时间（可选）,String
	 * @param endTime:提取数据点的结束时间（可选）,String
	 * @param cursor:指定本次请求继续从cursor位置开始提取数据（可选）,String
	 * 
	 * @return dataMap
	 */
	private Map<String, Object> getDataMap(String devicetypeid, String objid, String datastreamIds, String startTime, String endTime,String cursor){
		
		//传参map
		Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put("devicetypeid", devicetypeid);
		paramMap.put("objid", objid);
		ParamAssis dk = oneMapDao.getDevidKey(paramMap);
		
		//用于存放数据返回
		Map<String, Object> dataMap = new LinkedHashMap<String, Object>();
		
		dataMap = DatapointsApiThreadUtil.getDatapointsApi(datastreamIds, dk.getDevicenumber(), dk.getRmk1(), 
				startTime, endTime, cursor, "DESC", dataMap);
		
		return dataMap;
	}
     


	public List<Map<String, Object>> getOmPicList(HttpServletRequest request, String objtypeid) {
		
		String objid = (request.getParameter("objid") == null || "".equals(request.getParameter("objid"))) ? "" : request.getParameter("objid");
		String begintime = request.getParameter("begintime") == null ? "" : request.getParameter("begintime");
		String endtime = request.getParameter("endtime") == null ? "" : request.getParameter("endtime");
		
		Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put("objtypeid", objtypeid);
		paramMap.put("objid", objid);
		paramMap.put("begintime", begintime);
		paramMap.put("endtime", endtime);
		if ("".equals(begintime) || "".equals(endtime)) {
			paramMap.put("notime", "24 hour");
		} else {
			paramMap.put("yestime", "yestime");
		}
		
		List<Map<String, Object>> siteDetail = baseService.selectDetailForCpAttachInfoStoreTwo(Integer.parseInt(objid));
		
		for (int i = 0; i < siteDetail.size(); i++) {
			paramMap.put("objid", siteDetail.get(i).get("objid").toString());
			//查询图片信息
			List<PicInfo> picInfoList = oneMapDao.getPicInfoList(paramMap);
			siteDetail.get(i).put("picInfoList", picInfoList);
		}
		
		return siteDetail;
	}


	public List<OmRank> omRankByArea(HttpServletRequest request, String timetype) {
		
		//默认显示实时数据
		Map<String, Object> paramMap = new HashMap<String, Object>();
		
		String city = (request.getParameter("city") == null || "".equals(request.getParameter("city"))) ? "青岛市" : request.getParameter("city");
		
		paramMap.put("city", city);
		paramMap.put("cityfieldid", "1010006,5010006");
		
		String datetime = (request.getParameter("datetime") == null) ? "" : request.getParameter("datetime");
		//获取数据库最大时间
		String[] hourMaxTime = colMinMaxTimeByHour("1,4", 0, "", "1,29,2,30,3,21,4,22,5,23,6,24,7,97,28,8,9", "1,5");
		String[] dayMaxTime = colMinMaxTimeByDay("1,4", 0, "", "1,29,2,30,3,21,4,22,5,23,6,24,7,97,28,8,9", "2,6");
		
		List<OmRank> ranks = new ArrayList<OmRank>();
		if ("day".equals(timetype)) {
			//时间格式：yyyy-MM-dd
			if ("".equals(datetime)) {
				paramMap.put("begintime", dayMaxTime[0]);
				paramMap.put("endtime", dayMaxTime[1]);
			} else {
				paramMap.put("begintime", datetime +" 00:00:00");
				paramMap.put("endtime", datetime +" 23:59:59");
			}
			
			paramMap.put("objtypeid", "2,6");
			paramMap.put("dateformat", "yyyy-mm-dd");
			paramMap.put("sitenameid", "2010001,6010001");
			paramMap.put("sitenumberid", "2010002,6010002");
			paramMap.put("aqi", "aqi");
			
			ranks = oneMapDao.omRankByArea(paramMap);
		} else if ("month".equals(timetype)) {
			//时间格式：yyyy-MM
			if ("".equals(datetime)) {
				paramMap.put("begintime", dayMaxTime[1].substring(0, 7) +"-01 00:00:00");
				paramMap.put("endtime", getLastDayOfMonth(dayMaxTime[1].substring(0, 7)));
			} else {
				paramMap.put("begintime", datetime +"-01 00:00:00");
				paramMap.put("endtime", getLastDayOfMonth(datetime));
			}
			
			paramMap.put("objtypeid", "2,6");
			paramMap.put("dateformat", "yyyy-mm");
			paramMap.put("sitenameid", "2010001,6010001");
			paramMap.put("sitenumberid", "2010002,6010002");
			paramMap.put("goodrate", "goodrate");
			
			ranks = oneMapDao.omRankByArea(paramMap);
		} else {
			//时间格式：yyyy-MM-dd HH
			if ("".equals(datetime)) {
				paramMap.put("begintime", hourMaxTime[1]);
				paramMap.put("endtime", hourMaxTime[1]);
			} else {
				paramMap.put("begintime", datetime +":00:00");
				paramMap.put("endtime", datetime +":00:00");
			}
			
			paramMap.put("objtypeid", "1,5");
			paramMap.put("dateformat", "yyyy-mm-dd HH24:MI:SS");
			paramMap.put("sitenameid", "1010003,5010003");
			paramMap.put("sitenumberid", "1010001,5010001");
			paramMap.put("aqi", "aqi");
			
			ranks = oneMapDao.omRankByArea(paramMap);
		}
		
		return ranks;
	}


	public List<OmRank> omRankBySite(HttpServletRequest request, String timetype) {
		
		//默认显示实时数据
		Map<String, Object> paramMap = new HashMap<String, Object>();
		
		String city = (request.getParameter("city") == null || "".equals(request.getParameter("city"))) ? "青岛市" : request.getParameter("city");
		
		paramMap.put("city", city);
		paramMap.put("cityfieldid", "1010006,5010006");
		
		String datetime = (request.getParameter("datetime") == null) ? "" : request.getParameter("datetime");
		//获取数据库最大时间
		String[] hourMaxTime = colMinMaxTimeByHour("1,4", 0, "", "1,29,2,30,3,21,4,22,5,23,6,24,7,97,28,8,9", "1,5");
		String[] dayMaxTime = colMinMaxTimeByDay("1,4", 0, "", "1,29,2,30,3,21,4,22,5,23,6,24,7,97,28,8,9", "2,6");
		
		List<OmRank> ranks = new ArrayList<OmRank>();
		if ("day".equals(timetype)) {
			//时间格式：yyyy-MM-dd
			if ("".equals(datetime)) {
				paramMap.put("begintime", dayMaxTime[0]);
				paramMap.put("endtime", dayMaxTime[1]);
			} else {
				paramMap.put("begintime", datetime +" 00:00:00");
				paramMap.put("endtime", datetime +" 23:59:59");
			}
			
			paramMap.put("objtypeid", "2,6");
			paramMap.put("dateformat", "yyyy-mm-dd");
			paramMap.put("sitenameid", "2010001,6010001");
			paramMap.put("sitenumberid", "2010002,6010002");
			paramMap.put("aqi", "aqi");
			
			ranks = oneMapDao.omRankBySite(paramMap);
		} else if ("month".equals(timetype)) {
			//时间格式：yyyy-MM
			if ("".equals(datetime)) {
				paramMap.put("begintime", dayMaxTime[1].substring(0, 7) +"-01 00:00:00");
				paramMap.put("endtime", getLastDayOfMonth(dayMaxTime[1].substring(0, 7)));
			} else {
				paramMap.put("begintime", datetime +"-01 00:00:00");
				paramMap.put("endtime", getLastDayOfMonth(datetime));
			}
			
			paramMap.put("objtypeid", "2,6");
			paramMap.put("dateformat", "yyyy-mm");
			paramMap.put("sitenameid", "2010001,6010001");
			paramMap.put("sitenumberid", "2010002,6010002");
			paramMap.put("goodrate", "goodrate");
			
			ranks = oneMapDao.omRankBySite(paramMap);
		} else {
			//时间格式：yyyy-MM-dd HH
			if ("".equals(datetime)) {
				paramMap.put("begintime", hourMaxTime[1]);
				paramMap.put("endtime", hourMaxTime[1]);
			} else {
				paramMap.put("begintime", datetime +":00:00");
				paramMap.put("endtime", datetime +":00:00");
			}
			
			paramMap.put("objtypeid", "1,5");
			paramMap.put("dateformat", "yyyy-mm-dd HH24:MI:SS");
			paramMap.put("sitenameid", "1010003,5010003");
			paramMap.put("sitenumberid", "1010001,5010001");
			paramMap.put("aqi", "aqi");
			
			ranks = oneMapDao.omRankBySite(paramMap);
		}
		
		return ranks;
	}


}
