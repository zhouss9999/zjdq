package wy.qingdao_atmosphere.mobile.service;

import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import wy.qingdao_atmosphere.mobile.dao.AirAppDao;
import wy.qingdao_atmosphere.mobile.domain.AirCollect;
import wy.qingdao_atmosphere.mobile.domain.AirGoodRate;
import wy.qingdao_atmosphere.onemap.domain.KqzlColl;
import wy.util.AirBean;
import wy.util.Calc;
import wy.util.datapersistence.SpaceInfo;
import wy.util.datapersistence.Dao.BaseaddDao;
import wy.util.datapersistence.service.BaseService;

@Service("airAppService")
public class AirAppServiceImpl implements AirAppService {

	@Autowired
	private BaseaddDao baseaddDao;
	
	@Autowired 
	private BaseService baseService;
	
	@Autowired
	private AirAppDao airAppDao;

	
	public AirCollect getSKQ4City(HttpServletRequest request) {
		
		String city = (request.getParameter("city") == null || "".equals(request.getParameter("city"))) ? "青岛市" : request.getParameter("city");
		
		String objidsql = "select objid from cp_attach_infostore where fieldid in (1010006,5010006) and fieldvalue like concat(concat('%','"+city+"'),'%')";
		
		String[] times = colMinMaxTimeByHour("1,4", 0, objidsql);
		
		Map<String, Object> paramMap = new HashMap<String, Object>();
		
		paramMap.put("city", "'"+city+"'");
		paramMap.put("begintime", times[0]);
		paramMap.put("endtime", times[1]);
		paramMap.put("dateformat", "yyyy-mm-dd HH24:MI:SS");
		
		AirCollect ac = airAppDao.getKQ4City(paramMap); 
		
		AirBean ab = new AirBean(0, "", "", 0, Double.parseDouble(ac.getSo2()), Double.parseDouble(ac.getNo2()),
				Double.parseDouble(ac.getPm10()),Double.parseDouble(ac.getPm25()), Double.parseDouble(ac.getCo()),
				Double.parseDouble(ac.getO3()), Double.parseDouble(ac.getO38()),0.0,0.0,0.0,0.0,0.0,0.0,0.0);
		AirBean airQ = Calc.AirQ(ab);
		
		if (!"-".equals(ac.getCity())) {
			ac.setAqi(String.valueOf(airQ.getAqi()));
			ac.setPollutant(airQ.getPp());
			ac.setQuality(getStrAQlevel(airQ.getAqilevel()));
		} else {
			ac.setCity(city);
		}
		
		return ac;
	}
	
	
	public List<AirCollect> getSKQ4Citys(HttpServletRequest request) {
		
		String userid = (request.getParameter("userid") == null || "".equals(request.getParameter("userid"))) ? "" : request.getParameter("userid");
		
		Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put("objtypeid", 3);
		paramMap.put("userid", userid);
		paramMap.put("userfid", "3010002");
		List<Map<String, Object>> cityList = baseService.selectForCpAttachInfoStoreTwo(paramMap, "AirAppPublic");
		
		String city = "";
		if (cityList.size() > 0) {
			for (int i = 0; i < cityList.size(); i++) {
				Map<String, Object> cityMap = cityList.get(i);
				if (i != cityList.size() - 1) {
					city += "'"+ cityMap.get("cityname") + "',";
				} else {
					city += "'"+ cityMap.get("cityname") + "'";
				}
			}
		} else {
			city = "''";
		}
		
		paramMap.clear();
		paramMap.put("city", city);
		paramMap.put("recently", "1 second");
		paramMap.put("dateformat", "yyyy-mm-dd HH24:MI:SS");
		
		List<AirCollect> resultList = new ArrayList<AirCollect>();
		List<AirCollect> acList = airAppDao.getKQ4Citys(paramMap);
		
		for (int i = 0; i < acList.size(); i++) {
			AirCollect ac = acList.get(i);
			AirBean ab = new AirBean(0, "", "", 0, Double.parseDouble(ac.getSo2()), Double.parseDouble(ac.getNo2()),
					Double.parseDouble(ac.getPm10()),Double.parseDouble(ac.getPm25()), Double.parseDouble(ac.getCo()),
					Double.parseDouble(ac.getO3()), Double.parseDouble(ac.getO38()),0.0,0.0,0.0,0.0,0.0,0.0,0.0);
			AirBean airQ = Calc.AirQ(ab);
			
			if (!"-".equals(ac.getCity())) {
				ac.setAqi(String.valueOf(airQ.getAqi()));
				ac.setPollutant(airQ.getPp());
				ac.setQuality(getStrAQlevel(airQ.getAqilevel()));
				resultList.add(ac);
			} else {
				city = city.replace("'", "");
				for (int j = 0; j < city.split(",").length; j++) {
					ac = new AirCollect();
					ac.setCity(city.split(",")[j]);
					resultList.add(ac);
				}
			}
		}
		
		return resultList;
	}
	
	
	public List<KqzlColl> getSKQ4Sites(HttpServletRequest request) {
		
		String city = (request.getParameter("city") == null || "".equals(request.getParameter("city"))) ? "青岛市" : request.getParameter("city");
		
		Map<String, Object> paramMap = new HashMap<String, Object>();
		if (!"".equals(city)) {
			paramMap.put("city", "'"+city+"'");
		}
		paramMap.put("dateformat", "yyyy-mm-dd HH24:MI:SS");
		paramMap.put("sitenameid", "1010003,5010003");
		paramMap.put("sitenumberid", "1010001,5010001");
		paramMap.put("objtypeid", "1,5");
		paramMap.put("recently", "1 second");
		
		List<KqzlColl> list = airAppDao.getKQ4Site(paramMap);
		return list;
	}
	

	public Map<String, Object> getSKQ4Site(HttpServletRequest request) {
		
		String objid = request.getParameter("objid") == null ? "" : request.getParameter("objid");
		String[] times = colMinMaxTimeByDay("1,4", 0, objid);
		String hourBgtime = times[0];
		String hourEdtime = times[1];
		
		Map<String, Object> paramMap = new LinkedHashMap<String, Object>();
		
		//当日24小时的监测数据(时均值)
		paramMap.put("objid", objid);
		paramMap.put("begintime", hourBgtime);
		paramMap.put("endtime", hourEdtime);
		paramMap.put("dateformat", "yyyy-mm-dd HH24:MI:SS");
		paramMap.put("sitenameid", "1010003,5010003");
		paramMap.put("sitenumberid", "1010001,5010001");
		paramMap.put("objtypeid", "1,5");
		List<KqzlColl> hourlist = airAppDao.getKQ4Site(paramMap);
		
		//近一周7天的日监测数据(日均值)
		String dayObjid = airAppDao.getDayDataObjid(objid);
		String[] daytime = colMinMaxTimeByDay("1,4", 7, dayObjid);
		String dayBgtime = daytime[0];
		String dayEdtime = daytime[1];
		
		paramMap.put("objid", objid);
		paramMap.put("begintime", dayBgtime);
		paramMap.put("endtime", dayEdtime);
		paramMap.put("dateformat", "yyyy-mm-dd");
		paramMap.put("sitenameid", "2010001,6010001");
		paramMap.put("sitenumberid", "2010002,6010002");
		paramMap.put("objtypeid", "2,6");
		
		List<KqzlColl> daylist = airAppDao.getKQ4Site(paramMap);
		
		paramMap.clear();
		paramMap.put("newdata", hourlist.get(0));
		paramMap.put("hourdata", hourlist);
		paramMap.put("daydata", daylist);
		
		return paramMap;
	}
	

	public List<KqzlColl> getMND4Sites(HttpServletRequest request) {
		
		String city = (request.getParameter("city") == null || "".equals(request.getParameter("city"))) ? "青岛市" : request.getParameter("city");
		
		Map<String, Object> paramMap = new HashMap<String, Object>();
		if (!"".equals(city)) {
			paramMap.put("city", "'"+city+"'");
		}
		paramMap.put("dateformat", "yyyy-mm-dd HH24:MI:SS");
		paramMap.put("sitenameid", "1010003,5010003");
		paramMap.put("sitenumberid", "1010001,5010001");
		paramMap.put("objtypeid", "1,5");
		paramMap.put("recently", "1 second");
		
		List<KqzlColl> siteList = airAppDao.getKQ4Site(paramMap);
		
		//获取所有站点坐标
		String space_table = "space_site union select objid,id,st_AsText(shape) shape from space_countrysite";
		List<SpaceInfo> siteGeomList = baseService.getGeomList(space_table, "");
		Map<Integer, String> siteGeomMap = new LinkedHashMap<Integer, String>();
		if (siteGeomList.size() > 0) {
			for (SpaceInfo spaceInfo : siteGeomList) {
				siteGeomMap.put(spaceInfo.getObjid(), spaceInfo.getShape().replace("POINT(", "").replace(")", ""));
			}
		}
		
		for (int i = 0; i < siteList.size(); i++) {
			KqzlColl kc = siteList.get(i);
			if (siteGeomMap.containsKey(kc.getObjid())) {
				String[] geom = siteGeomMap.get(kc.getObjid()).split(" ");
				kc.setLon(geom[0]);
				kc.setLat(geom[1]);
			}
		}
		
		return siteList;
	}


	public Map<String, Object> getMND4Site(HttpServletRequest request) {
		
		String objid = request.getParameter("objid") == null ? "" : request.getParameter("objid");
		
		String[] times = colMinMaxTimeByHour("1,4", 24, objid);
		
		String begintime = times[0];
		String endtime = times[1];
		
		Map<String, Object> paramMap = new LinkedHashMap<String, Object>();
		
		//近24小时的监测数据
		paramMap.put("objid", objid);
		paramMap.put("begintime", begintime);
		paramMap.put("endtime", endtime);
		paramMap.put("dateformat", "yyyy-mm-dd HH24:MI:SS");
		paramMap.put("sitenameid", "1010003,5010003");
		paramMap.put("sitenumberid", "1010001,5010001");
		paramMap.put("objtypeid", "1,5");
		List<KqzlColl> hourlist = airAppDao.getKQ4Site(paramMap);
		
		paramMap.clear();
		paramMap.put("newdata", hourlist.get(0));
		paramMap.put("hourdata", hourlist);
		
		return paramMap;
	}
	
	
	public List<AirGoodRate> getMYL4Sites(HttpServletRequest request) {
		
		String city = (request.getParameter("city") == null || "".equals(request.getParameter("city"))) ? "青岛市" : request.getParameter("city");
		
		Map<String, Object> paramMap = new HashMap<String, Object>();
		if (!"".equals(city)) {
			paramMap.put("city", "'"+city+"'");
		}
		paramMap.put("dateformat", "yyyy-mm-dd");
		paramMap.put("sitenameid", "2010001,6010001");
		paramMap.put("sitenumberid", "2010002,6010002");
		paramMap.put("objtypeid", "2,6");
		paramMap.put("recently", "30 day");
		
		//各个站点近30天的监测数据
		List<KqzlColl> siteList = airAppDao.getKQ4Site(paramMap);
		
		List<AirGoodRate> resultList = new ArrayList<AirGoodRate>();
		Map<Integer, int[]> beanMap = new LinkedHashMap<Integer, int[]>();
		
		for (KqzlColl kc : siteList) {
			if (beanMap.containsKey(kc.getObjid())) {
				if ("优".equals(kc.getQuality()) || "良".equals(kc.getQuality())) {
					beanMap.get(kc.getObjid())[0] += 1;
				}
				beanMap.get(kc.getObjid())[1] += 1;
				beanMap.put(kc.getObjid(), beanMap.get(kc.getObjid()));
			} else {
				//初始化优良率数组
				int[] goodsize = {0,0};
				if ("优".equals(kc.getQuality()) || "良".equals(kc.getQuality())) {
					goodsize[0] += 1;
				}
				goodsize[1] += 1;
				beanMap.put(kc.getObjid(), goodsize);
				AirGoodRate agr = new AirGoodRate(kc.getObjid(), kc.getSitenumber(), kc.getSitename(), kc.getIssite());
				resultList.add(agr);
			}
		}
		
		//获取所有站点坐标
		String space_table = "space_site union select objid,id,st_AsText(shape) shape from space_countrysite";
		List<SpaceInfo> siteGeomList = baseService.getGeomList(space_table, "");
		Map<Integer, String> siteGeomMap = new LinkedHashMap<Integer, String>();
		if (siteGeomList.size() > 0) {
			for (SpaceInfo spaceInfo : siteGeomList) {
				siteGeomMap.put(spaceInfo.getObjid(), spaceInfo.getShape().replace("POINT(", "").replace(")", ""));
			}
		}
		
		DecimalFormat df = new DecimalFormat("#0.0");//保留一位小数(奇进偶舍)
		//df.setRoundingMode(RoundingMode.HALF_UP);//(四舍五入)
		for (int i = 0; i < resultList.size(); i++) {
			AirGoodRate agr = resultList.get(i);
			if (siteGeomMap.containsKey(agr.getObjid())) {
				String[] geom = siteGeomMap.get(agr.getObjid()).split(" ");
				agr.setLon(geom[0]);
				agr.setLat(geom[1]);
			}
			if (beanMap.containsKey(agr.getObjid())) {
				int[] goodsize = beanMap.get(agr.getObjid());
				int size = goodsize[1];
				if (size == 0) {
					size =1;
				}
				agr.setGoodrate(df.format(((double)goodsize[0]/size)*100));
			}
		}
		
		return resultList;
	}
	
	
	public Map<String, Object> getMYL4Site(HttpServletRequest request, int day) {
		
		String objid = request.getParameter("objid") == null ? "" : request.getParameter("objid");
		String dayObjid = airAppDao.getDayDataObjid(objid);
		
		String[] times = colMinMaxTimeByDay("1,4", day, dayObjid);
		
		String begintime = times[0];
		String endtime = times[1];
		
		Map<String, Object> paramMap = new LinkedHashMap<String, Object>();
		
		//近day天的监测数据
		paramMap.put("objid", objid);
		paramMap.put("begintime", begintime);
		paramMap.put("endtime", endtime);
		paramMap.put("dateformat", "yyyy-mm-dd");
		paramMap.put("sitenameid", "2010001,6010001");
		paramMap.put("sitenumberid", "2010002,6010002");
		paramMap.put("objtypeid", "2,6");
		List<KqzlColl> daylist = airAppDao.getKQ4Site(paramMap);
		
		int good = 0;
		int size = daylist.size();
		if (daylist.size() > 0) {
			for (KqzlColl kc : daylist) {
				if ("优".equals(kc.getQuality()) || "良".equals(kc.getQuality())) {
					good += 1;
				}
			}
		} else {
			size = 1;
		}
		
		DecimalFormat df = new DecimalFormat("#0.0");//保留一位小数(奇进偶舍)
		//df.setRoundingMode(RoundingMode.HALF_UP);//(四舍五入)
		paramMap.clear();
		paramMap.put("goodrate", df.format(((double)good/size)*100));
		paramMap.put("daydata", daylist);
		
		return paramMap;
	}
	

	public List<KqzlColl> getRAQ4Sites(HttpServletRequest request) {
		
		String city = (request.getParameter("city") == null || "".equals(request.getParameter("city"))) ? "青岛市" : request.getParameter("city");
		//排序(DESC倒序/ASC正序)--默认倒序
		String sort = (request.getParameter("sort") == null || "".equals(request.getParameter("sort"))) ? "DESC" : request.getParameter("sort");
		
		Map<String, Object> paramMap = new HashMap<String, Object>();
		if (!"".equals(city)) {
			paramMap.put("city", "'"+city+"'");
		}
		paramMap.put("dateformat", "yyyy-mm-dd HH24:MI:SS");
		paramMap.put("sitenameid", "1010003,5010003");
		paramMap.put("sitenumberid", "1010001,5010001");
		paramMap.put("objtypeid", "1,5");
		paramMap.put("recently", "1 second");
		
		List<KqzlColl> siteList = airAppDao.getKQ4Site(paramMap);
		
		//排序==通过集合提供的方法实现
		if ("DESC".equals(sort)) {
			Collections.sort(siteList, new Comparator<KqzlColl>() {
				public int compare(KqzlColl o1, KqzlColl o2) {
					return Integer.parseInt(o2.getAqi()) - Integer.parseInt(o1.getAqi());
				}
			});
		} else {
			Collections.sort(siteList, new Comparator<KqzlColl>() {
				public int compare(KqzlColl o1, KqzlColl o2) {
					return Integer.parseInt(o1.getAqi()) - Integer.parseInt(o2.getAqi());
				}
			});
		}
		
		return siteList;
	}

	
	public List<AirGoodRate> getRYLSites(HttpServletRequest request, String days) {
		
		String city = (request.getParameter("city") == null || "".equals(request.getParameter("city"))) ? "青岛市" : request.getParameter("city");
		
		//排序(DESC倒序/ASC正序)--默认倒序
		String sort = (request.getParameter("sort") == null || "".equals(request.getParameter("sort"))) ? "DESC" : request.getParameter("sort");
		
		Map<String, Object> paramMap = new HashMap<String, Object>();
		if (!"".equals(city)) {
			paramMap.put("city", "'"+city+"'");
		}
		paramMap.put("dateformat", "yyyy-mm-dd");
		paramMap.put("sitenameid", "2010001,6010001");
		paramMap.put("sitenumberid", "2010002,6010002");
		paramMap.put("objtypeid", "2,6");
		paramMap.put("recently", days);
		
		//各个站点近7天的监测数据
		List<KqzlColl> siteList = airAppDao.getKQ4Site(paramMap);
		
		List<AirGoodRate> resultList = new ArrayList<AirGoodRate>();
		Map<Integer, int[]> beanMap = new LinkedHashMap<Integer, int[]>();
		
		for (KqzlColl kc : siteList) {
			if (beanMap.containsKey(kc.getObjid())) {
				if ("优".equals(kc.getQuality()) || "良".equals(kc.getQuality())) {
					beanMap.get(kc.getObjid())[0] += 1;
				}
				beanMap.get(kc.getObjid())[1] += 1;
				beanMap.put(kc.getObjid(), beanMap.get(kc.getObjid()));
			} else {
				//初始化优良率数组
				int[] goodsize = {0,0};
				if ("优".equals(kc.getQuality()) || "良".equals(kc.getQuality())) {
					goodsize[0] += 1;
				}
				goodsize[1] += 1;
				beanMap.put(kc.getObjid(), goodsize);
				AirGoodRate agr = new AirGoodRate(kc.getObjid(), kc.getSitenumber(), kc.getSitename(), kc.getIssite());
				resultList.add(agr);
			}
		}
		
		DecimalFormat df = new DecimalFormat("#0.0");//保留一位小数(奇进偶舍)
		//df.setRoundingMode(RoundingMode.HALF_UP);//(四舍五入)
		for (int i = 0; i < resultList.size(); i++) {
			AirGoodRate agr = resultList.get(i);
			if (beanMap.containsKey(agr.getObjid())) {
				int[] goodsize = beanMap.get(agr.getObjid());
				int size = goodsize[1];
				if (size == 0) {
					size =1;
				}
				agr.setGoodrate(df.format(((double)goodsize[0]/size)*100));
			}
		}
		
		//排序==通过集合提供的方法实现
		if ("DESC".equals(sort)) {
			Collections.sort(resultList, new Comparator<AirGoodRate>() {
				public int compare(AirGoodRate o1, AirGoodRate o2) {
					double tempt = Double.parseDouble(o2.getGoodrate()) - Double.parseDouble(o1.getGoodrate());
					if (tempt > 0) {
						return 1;
					} else if (tempt < 0) {
						return -1;
					} else {
						return 0;
					}
				}
			});
		} else {
			Collections.sort(resultList, new Comparator<AirGoodRate>() {
				public int compare(AirGoodRate o1, AirGoodRate o2) {
					double tempt = Double.parseDouble(o1.getGoodrate()) - Double.parseDouble(o2.getGoodrate());
					if (tempt > 0) {
						return 1;
					} else if (tempt < 0) {
						return -1;
					} else {
						return 0;
					}
				}
			});
		}
		
		return resultList;
	}
	
	
	/**
	 * 获取数据库监测数据最大时间(maxtime)和(maxtime-n小时)的时间
	 * @param devicetypeid 设备类型id
	 * @param hour 小时
	 * @return {mintime,maxtime}
	 */
	private String[] colMinMaxTimeByHour(String devicetypeid, int hour, String objid){
		//起始时间
		//获取数据库中辐射监测数据的最新时间
		String maxtime = baseaddDao.getMaxTimeByDtid("yyyy-MM-dd HH24:MI:ss", devicetypeid, objid);
		//获取最大时间往前hour小时的时间
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		Date date = new Date();
		try {
			if (maxtime != null && !"".equals(maxtime)) {
					date = sdf.parse(maxtime);
			} else {
				maxtime = sdf.format(date);
			}
		} catch (ParseException e) {
			e.printStackTrace();
		}
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(date);
		calendar.set(Calendar.HOUR_OF_DAY, calendar.get(Calendar.HOUR_OF_DAY)-hour);//(maxtime-n小时)的时间
		String mintime = sdf.format(calendar.getTime());
		
		String[] times = {mintime,maxtime};
		
		return times;
	}
	
	
	/**
	 * 获取数据库监测数据最大时间(maxtime)和(maxtime-n天)的时间
	 * @param devicetypeid 设备类型id
	 * @param day 天
	 * @return {mintime,maxtime}
	 */
	private String[] colMinMaxTimeByDay(String devicetypeid, int day, String objid){
		//起始时间
		//获取数据库中辐射监测数据的最新时间
		String maxtime = baseaddDao.getMaxTimeByDtid("yyyy-MM-dd", devicetypeid, objid);
		//获取最大时间往前hour小时的时间
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Date date = new Date();
		try {
			if (maxtime != null && !"".equals(maxtime)) {
				date = sdf.parse(maxtime);
			} else {
				maxtime = sdf.format(date);
			}
		} catch (ParseException e) {
			e.printStackTrace();
		}
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(date);
		calendar.set(Calendar.DAY_OF_MONTH, calendar.get(Calendar.DAY_OF_MONTH)-day);//(maxtime-n天)的时间
		String mintime = sdf.format(calendar.getTime());
		
		String[] times = {mintime + " 00:00:00",maxtime + " 23:59:59"};
		
		return times;
	}

	
	/**
	 * 传入水质类别String类型，
	 * 返回对应水质类别的int类型
	 * @author zzb
	 * @param AQlevel
	 */
	private String getStrAQlevel(int AQlevel) {
		String AQlevelStr = "-";
		if (AQlevel == 1) {
			AQlevelStr = "优";
		} else if (AQlevel == 2) {
			AQlevelStr = "良";
		} else if (AQlevel == 3) {
			AQlevelStr = "轻度污染";
		} else if (AQlevel == 4) {
			AQlevelStr = "中度污染";
		} else if (AQlevel == 5) {
			AQlevelStr = "重度污染";
		} else {
			AQlevelStr = "严重污染";
		}
		
		return AQlevelStr;
	}


}
